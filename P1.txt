/**
 * Práctica 1: Definición del lenguaje: BBAAD
 * Grupo 7
 * Francisco Javier Moreno Vega
 * Alberto Quesada Aranda
 * 11/10/2014
 */

/**
 * Definiciones básicas.
 */
Program ::= header_program block;

block ::= start_block local_var_dec sub_progs sentences end_block ;

sub_progs ::= sub_progs sub_prog | ;

sub_prog ::= header_subprogram block;

local_var_dec ::= LIMIT_INI local_var LIMIT_END | ;

header_program ::= MAIN; //No estoy seguro de que sea así.

start_block ::= BEGIN;

end_block ::= END;

local_var ::= local_var var_body | 
            var_body;

var_body ::= type list_id SEMICOLON;

header_subprogram ::= type id PL parameters PR | 
            type id PL PR;

sentences ::= sentences sentence | 
            sentence;

sentence ::= block | 
            sentence_assign | 
            sentence_if-then-else | 
            sentence_while | 
            sentence_input | 
            sentence_output | 
            sentence_return | 
            sentence_do_until | 
            sentence_list_forward_back |
            sentence_list_start_cursor;

sentence_assign ::= id ASSIGN expr SEMICOLON;

/*sentence_if-then-else ::= IF PL expr PR sentence | 
            IF PL expr PR sentence ELSE sentence;*/

sentence_if-then-else ::= IF expr sentence | 
            IF expr sentence ELSE sentence;

/*sentence_while ::= WHILE PL expr PR sentence;*/

sentence_while ::= WHILE expr sentence;

/*sentence_input ::= INPUT input_list SEMICOLON;*/

sentence_input ::= INPUT list_id SEMICOLON;

/*sentence_output ::= OUTPUT exprs_cad SEMICOLON;*/

sentence_output ::= OUTPUT expr_cad SEMICOLON;

sentence_return ::= RETURN expr SEMICOLON;

/*sentence_do_until ::= DO sentence UNTIL PL expr PR SEMICOLON;*/

sentence_do_until ::= DO sentence UNTIL expr SEMICOLON;

sentence_list_forward_back ::= expr OP_LIST;

sentence_list_start_cursor ::= OP_LIST_START_CURSOR expr;

expr ::= PL expr PR | 
          OP_UNIT expr | 
          expr OP_BIN expr | 
          expr OP_BIN expr OP_BIN expr | 
          id | 
          const | 
          function_call | 
          const_list;

/*exprs_cad ::= exprs_cad COMMA expr_cad | 
            expr_cad;

expr_cad ::= expr | 
            cad;*/
            
expr_cad ::= expr_cad COMMA expr_cad | 
            expr |
            cad;

/**
 * Definiciones auxiliares.
 */

parameters ::= parameters COMMA type id | 
            type id;

list_id ::= list_id COMMA id | 
            id;

/*input_list ::= input_list COMMA id | 
            id;*/

exprs ::= exprs COMMA expr | expr; //No estoy seguro de su uso.

function_call ::= id PL exprs PR; //Creo que hay que cambiarla.

const_list ::= BEGIN_LIST elements_list END_LIST;

elements_list ::= elements_list COMMA const | 
            const;

ASSIGN ::= '=' ;

cad ::= cad letter | 
            cad digit | 
            letter | 
            digit | 
            _cad;

id ::= letter 
            | id [ letter | digit ];

const ::= c_int | 
            c_float | 
            c_char | 
            c_bool;

type ::= int | 
            float | 
            char | 
            bool | 
            list type;

c_bool ::= const bool;

c_char ::= const char;

c_float ::= const float;

c_int ::= const int;

list ::= 'list of';
 
bool ::= 'true' | 
            'false';

char ::= digit | 
            letter;

float ::= int '.' [digit];

int ::= ['-'] digit | 
            digit | 
            int digit;

letter = a | b | c | ... | z | A | B | ... | Z;

digit = 0 | 1 | 2 | 3 | 4 | ... | 9;

PL ::= '(' ;

PR ::= ')' ;

COMMA ::= ',' ;

SEMICOLON ::= ';' ;

BEGIN ::= '{' ;

END ::= '}' ;

BEGIN_LIST ::= '[' ;

END_LIST ::= ']' ;

OP_BIN ::= / | % | > | < | >= | <= | == | != | || | && | ^ | + | - | * | ** | @ | -- ;

OP_UNIT ::= ! | + | - | # | ? | ++ | -- ;

OP_LIST ::= << | >>;

OP_LIST_START_CURSOR ::= $;
