%token MAIN BINARIO MAS_MENOS ENTERO UNARIO CASE PARIZQ PARDER ASIG IF ELSE WHILE INPUT OUTPUT F_VAR_LOCAL I_VAR_LOCAL FIN_BLOQUE INI_BLOQUE TIPO_DATO RETURN SWITCH BOOL I_CONS_PILA F_CONS_PILA FIN_SENTENC CADENA REAL NOMBRE CHARDOS_PUNTOS BREAK COMA  
%left ASIG
%left MAS_MENOS
%left BINARIO
%left PARIZQ PARDER

%start PROGRAMA

%%
PROGRAMA : MAIN BLOQUE ;
BLOQUE : INI_BLOQUE DECLAR_DE_VARIABLES_LOCALES DECLAR_DE_SUBPROGS SENTENCIAS FIN_BLOQUE ;
VARIABLE : NOMBRE ;
ARGUMENTOS : TIPO_DATO VARIABLE ;
	| ARGUMENTOS ;
DECLAR_DE_VARIABLES_LOCALES : I_VAR_LOCAL VARIABLES_LOCALES F_VAR_LOCAL ;
DECLAR_DE_SUBPROGS : DECLAR_DE_SUBPROGS DECLAR_SUBPROG ;
SENTENCIAS : SENTENCIAS SENTENCIA ;
	| SENTENCIA ;

SENTENCIA : BLOQUE ;
	| SENTENCIA_ASIGNACION ;
	| SENTENCIA_IF ;
	| SENTENCIA_WHILE ;
	| SENTENCIA_ENTRADA ;
	| SENTENCIA_SALIDA ;
	| SENTENCIA_RETURN ;
	| SENTENCIA_SWITCH ;
VARIABLES_LOCALES : VARIABLES_LOCALES CUERPO_DECLAR_VARIABLES ;
	| CUERPO_DECLAR_VARIABLES ;
DECLAR_SUBPROG : CABECERA_SUBPROG BLOQUE ;
SENTENCIA_ASIGNACION : VARIABLE ASIG EXPRESION FIN_SENTENC ;
SENTENCIA_IF : IF PARIZQ CONDICION PARDER SENTENCIA ;
	| IF PARIZQ CONDICION PARDER SENTENCIA ELSE SENTENCIA ;
SENTENCIA_WHILE : WHILE PARIZQ CONDICION PARDER SENTENCIA ;
SENTENCIA_ENTRADA : INPUT LISTA_VARIABLES ;
LISTA_VARIABLES : LISTA_VARIABLES COMA VARIABLE ;
	| VARIABLE ;
SENTENCIA_SALIDA : OUTPUT LISTA_EXPRESIONES_O_SALIDAS ;
LISTA_EXPRESIONES_O_SALIDAS : LISTA_EXPRESIONES_O_SALIDAS COMA EXPRESION_CADENA ;
	| EXPRESION_CADENA ;
EXPRESION_CADENA : EXPRESION ;
	| CADENA ;
SENTENCIA_RETURN : RETURN EXPRESION FIN_SENTENC ;
SENTENCIA_SWITCH : SWITCH PARIZQ VARIABLE PARDER INI_BLOQUE BLOQUE_SWITCH FIN_BLOQUE ;
CUERPO_DECLAR_VARIABLES : TIPO_DATO LISTA_VARIABLES FIN_SENTENC ;
CONDICION : VARIABLE BINARIO VARIABLE ;
	| BINARIO VARIABLE ;
EXPRESIONES_RETURN : VARIABLE ;
	| BOOL ;
BLOQUE_SWITCH : CASE EXPRESION DOS_PUNTOS SENTENCIA BREAK FIN_SENTENC BLOQUE_SWITCH ;
CABECERA_SUBPROG : TIPO_DATO VARIABLE PARIZQ PARAM PARDER ;
PARAM : PARAM COMA TIPO_DATO VARIABLE ;
	| TIPO_DATO VARIABLE ;
EXPRESION : PARIZQ EXPRESION PARDER ;
	| UNARIO EXPRESION ;
	| EXPRESION COMA EXPRESION ;
	| VARIABLE ;
	| CONSTANTE ;
	| FUNCION ;
CONSTANTE : ENTERO ;
   	| REAL ;
   	| BOOL ;
   	| CHAR ;
   	| CONST_PILA ;
CONST_PILA : CONST_PILA_ENTERO ;
	| CONST_PILA_REAL ;
	| CONST_PILA_BOOLEANO ;
	| CONST_PILA_CARACTER ;
CONST_PILA_ENTERO : I_CONS_PILA LISTA_CONST_ENTERO F_CONS_PILA ;
LISTA_CONST_ENTERO : LISTA_CONST_ENTERO COMA ENTERO ;
	| ENTERO ;
CONST_PILA_REAL : I_CONS_PILA LISTA_CONST_REAL F_CONS_PILA ;
LISTA_CONST_REAL : LISTA_CONST_REAL COMA REAL ;
	| REAL ;
CONST_PILA_BOOLEANO : I_CONS_PILA LISTA_CONST_BOOLEANO F_CONS_PILA ;
LISTA_CONST_BOOLEANO : LISTA_CONST_BOOLEANO ;
	| BOOL ;
CONST_PILA_CARACTER : I_CONS_PILA LISTA_CONST_CARACTER F_CONS_PILA  ;
LISTA_CONST_CARACTER : LISTA_CONST_CARACTER CHAR ;
	| CHAR ;
FUNCION : VARIABLE PARIZQ LISTA_EXPRESION PARDER ;
LISTA_EXPRESION : LISTA_EXPRESION COMA EXPRESION ;
	| EXPRESION ;
%%

#include "lex.yy.c"
#include "error.y"

main(){
   yyparse();
}
